<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Taylor Brazelton</title>
		<link>https://taylorbrazelton.com/posts/</link>
		<description>Recent content in Posts on Taylor Brazelton</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Wed, 13 Mar 2019 13:08:51 -0400</lastBuildDate>
		<atom:link href="https://taylorbrazelton.com/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Offset vs Seek/Keyset Pagination</title>
			<link>https://taylorbrazelton.com/posts/2019/03/offset-vs-seek-pagination/</link>
			<pubDate>Wed, 13 Mar 2019 13:08:51 -0400</pubDate>
			
			<guid>https://taylorbrazelton.com/posts/2019/03/offset-vs-seek-pagination/</guid>
			<description>Today I was focused on defining the standards for pagination on a new product and decided to dialog with a coworker. Below is the idea I threw out:
 Any list of items I return from the API will be in this format:
{ results: [], next: null, }  The only thing that would identify the result as a part of pagination.. would be the value of the “next” key.</description>
			<content type="html"><![CDATA[

<p>Today I was focused on defining the standards for pagination on a new product and decided to dialog with a coworker. Below is the idea I threw out:</p>

<blockquote>
<p>Any list of items I return from the API will be in this format:</p>
<div class="highlight"><pre class="chroma"><code class="language-Javascript" data-lang="Javascript"><span class="p">{</span>
  <span class="nx">results</span><span class="o">:</span> <span class="p">[],</span>
  <span class="nx">next</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div>
<p>The only thing that would identify the result as a part of pagination.. would be the value of the “next” key. If it is <code>null</code> then there would be NO more items beyond the ones I have already returned. IFF there are more items.. I would return something like.. next: 2 Thus identifying that there is a page=2 of items more for the client. And depending on page=2&rsquo;s results… it’s next field would identify if there is a page=3 more of results.. etc..</p>

<p>What do you think? I feel like I am at a point that making these pagination standards will be critical for the future of other api endpoints..</p>
</blockquote>

<p>This sparked my coworker to respond:</p>

<blockquote>
<p>I really like the standard of using <code>total</code>, <code>limit</code>, and <code>skip</code>.
With only using <code>next</code> you don’t know how many items or pages there are.
Using total, limit, and skip really lends itself to handling pagination on the client — where the user can pick how many results to display per page.</p>
</blockquote>

<p>Talk about good points. However, their exists similarities between our designs.
If I was to go implement either of these, they would both end up being an implementation of the offset method. Whether the offsets where to be statically stored on the server or defined by the frontend was the only difference.
Therefore, both of these ideas are implementation preferences defining how the offsets should be handled and NOT differences in the underlying concept of how we would load the data.</p>

<p>This flipped a switch in my brain that reminded me of an issue I faced at an previous job. One day we had customers start to call-in and complain about the time it took to load files(listings) beyond the 10th page. The offset method was used to display the metadata to the user and this ended up being a side effect.</p>

<p>Taking all this into account I thought there had to be a better way.</p>

<h2 id="what-is-offset-pagination">What is Offset Pagination?</h2>

<p>Perhaps you have seen SQL Query similar to this before:</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">firstname</span><span class="p">,</span> <span class="n">lastname</span><span class="p">,</span> <span class="n">created</span><span class="p">,</span> <span class="n">updated</span>
<span class="k">FROM</span> <span class="n">contacts</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">id</span>
<span class="k">LIMIT</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span></code></pre></div>
<p>The query above grabs the first 10 records. Similarly, to get the 10 records on page 4 we would execute the following:</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">firstname</span><span class="p">,</span> <span class="n">lastname</span><span class="p">,</span> <span class="n">created</span><span class="p">,</span> <span class="n">updated</span>
<span class="k">FROM</span> <span class="n">contacts</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">id</span>
<span class="k">LIMIT</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">10</span></code></pre></div>
<h2 id="problems-with-offset-pagination">Problems with Offset Pagination:</h2>

<ul>
<li><p>The higher the offset the <a href="https://stackoverflow.com/a/4502426" target="_blank">slower the query</a>. <a href="https://explainextended.com/2009/10/23/mysql-order-by-limit-performance-late-row-lookups/" target="_blank">Source 2</a></p></li>

<li><p>One must calculate the amount of pages based off the total amount of records.</p></li>

<li><p>Must scan an index to count the number of rows.</p></li>

<li><p><a href="http://www.4guysfromrolla.com/webtech/042606-1.shtml" target="_blank">Complicated solutions to speed up results on pages farther back.</a></p></li>

<li><p>Even with an index, we scan the index, to a sort on the data, then select the items we want to return. The first two steps are obviously a waste as we will be manipulating data that is not relevant to the results we want to return.</p></li>
</ul>

<p>There MUST be a better way! And there is. Introducing seek pagination.</p>

<h2 id="seek-keyset-pagination">Seek/Keyset Pagination</h2>

<p>The seek method is based on filtering out the data from the previous pages. We do this by having the client send the ID of the last record listed. We take that ID and place it in the WHERE clause providing us with only relevant data. Obviously this implementation requires your data to be <a href="http://www.unicode.org/notes/tn9/tn9-1.html" target="_blank">deterministically sortable</a>.</p>

<p>&ldquo;Don&rsquo;t touch what you don&rsquo;t need&rdquo; - <a href="https://youtu.be/GzMaN-IX7wQ?t=655" target="_blank">Youtube</a></p>

<p>An example SQL statement follows:</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">firstname</span><span class="p">,</span> <span class="n">lastname</span>
<span class="k">FROM</span> <span class="n">contacts</span>
<span class="k">WHERE</span> <span class="n">id</span> <span class="o">&lt;</span> <span class="mi">10</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">id</span> <span class="k">DESC</span>
<span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span></code></pre></div>
<p>Therefore from a REST perspective the results would appear as so:</p>
<div class="highlight"><pre class="chroma"><code class="language-Javascript" data-lang="Javascript"><span class="p">{</span>
  <span class="s2">&#34;results&#34;</span><span class="o">:</span> <span class="p">[</span>
    <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="p">...</span> <span class="p">},</span>
    <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="p">...</span> <span class="p">}</span>
    <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span> <span class="p">...</span> <span class="p">}</span>
    <span class="p">...</span>
    <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span> <span class="p">...</span> <span class="p">}</span>
  <span class="p">]</span>
<span class="p">}</span>
</code></pre></div>
<p>And when the user wanted to get the next page of items, they simply tack on the <code>last_id</code> from the previous pagination result.</p>

<pre><code>GET /api/contacts?last_id=10
</code></pre>

<p>Resulting:</p>
<div class="highlight"><pre class="chroma"><code class="language-Javascript" data-lang="Javascript"><span class="p">{</span>
  <span class="s2">&#34;results&#34;</span><span class="o">:</span> <span class="p">[</span>
    <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="mi">11</span><span class="p">,</span> <span class="p">...</span> <span class="p">},</span>
    <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="mi">12</span><span class="p">,</span> <span class="p">...</span> <span class="p">}</span>
    <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="mi">13</span><span class="p">,</span> <span class="p">...</span> <span class="p">}</span>
    <span class="p">...</span>
    <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="mi">20</span><span class="p">,</span> <span class="p">...</span> <span class="p">}</span>
  <span class="p">]</span>
<span class="p">}</span>
</code></pre></div>
<p>For more information about seek/keyset please visit the following sources.</p>

<p>Sources:</p>

<p><a href="https://blog.jooq.org/2013/10/26/faster-sql-paging-with-jooq-using-the-seek-method/" target="_blank">https://blog.jooq.org/2013/10/26/faster-sql-paging-with-jooq-using-the-seek-method/</a></p>

<p><a href="https://use-the-index-luke.com/sql/partial-results/fetch-next-page" target="_blank">https://use-the-index-luke.com/sql/partial-results/fetch-next-page</a></p>

<p><a href="https://stackoverflow.com/a/3215973" target="_blank">https://stackoverflow.com/a/3215973</a></p>

<p><a href="https://stackoverflow.com/a/4502426" target="_blank">https://stackoverflow.com/a/4502426</a></p>

<p><a href="https://www.citusdata.com/blog/2016/03/30/five-ways-to-paginate/" target="_blank">https://www.citusdata.com/blog/2016/03/30/five-ways-to-paginate/</a></p>

<p><a href="https://blog.jooq.org/2016/08/10/why-most-programmers-get-pagination-wrong/" target="_blank">https://blog.jooq.org/2016/08/10/why-most-programmers-get-pagination-wrong/</a></p>

<p><a href="https://www.youtube.com/watch?v=GzMaN-IX7wQ" target="_blank">https://www.youtube.com/watch?v=GzMaN-IX7wQ</a></p>

<p><a href="http://www.unicode.org/notes/tn9/tn9-1.html" target="_blank">http://www.unicode.org/notes/tn9/tn9-1.html</a></p>
]]></content>
		</item>
		
		<item>
			<title>Alembic Load Config From Env Vars</title>
			<link>https://taylorbrazelton.com/posts/2019/02/alembic-load-config-from-env-vars/</link>
			<pubDate>Mon, 25 Feb 2019 09:18:52 -0500</pubDate>
			
			<guid>https://taylorbrazelton.com/posts/2019/02/alembic-load-config-from-env-vars/</guid>
			<description>Today, while trying to integrate the python library Alembic into a micro-service, I ran into the issue of needing to load the database connection string from a few environmental variables. Needless to say I went ahead and did some googling and compiled this solution:
def get_url(): &amp;#34;&amp;#34;&amp;#34;Custom method to get config from the environmental variables. Based on: http://allan-simon.github.io/blog/posts/python-alembic-with-environment-variables/ &amp;#34;&amp;#34;&amp;#34; return &amp;#34;postgres://{}:{}@{}/{}&amp;#34;.format( os.getenv(&amp;#34;DB_USER&amp;#34;, &amp;#34;username&amp;#34;), os.getenv(&amp;#34;DB_PASSWORD&amp;#34;, &amp;#34;password&amp;#34;), os.getenv(&amp;#34;DB_HOST&amp;#34;, &amp;#34;database_host&amp;#34;), os.getenv(&amp;#34;DB_NAME&amp;#34;, &amp;#34;database_name&amp;#34;), ) Then inside the run_migrations_offline method I swapped out:</description>
			<content type="html"><![CDATA[<p>Today, while trying to integrate the python library <a href="https://pypi.org/project/alembic/" target="_blank">Alembic</a> into a micro-service, I ran into the issue of needing to load the database connection string from a few environmental variables. Needless to say I went ahead and did some googling and compiled this solution:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">get_url</span><span class="p">():</span>
    <span class="s2">&#34;&#34;&#34;Custom method to get config from the environmental variables.
</span><span class="s2">
</span><span class="s2">    Based on: http://allan-simon.github.io/blog/posts/python-alembic-with-environment-variables/
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="k">return</span> <span class="s2">&#34;postgres://{}:{}@{}/{}&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
        <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">&#34;DB_USER&#34;</span><span class="p">,</span> <span class="s2">&#34;username&#34;</span><span class="p">),</span>
        <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">&#34;DB_PASSWORD&#34;</span><span class="p">,</span> <span class="s2">&#34;password&#34;</span><span class="p">),</span>
        <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">&#34;DB_HOST&#34;</span><span class="p">,</span> <span class="s2">&#34;database_host&#34;</span><span class="p">),</span>
        <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">&#34;DB_NAME&#34;</span><span class="p">,</span> <span class="s2">&#34;database_name&#34;</span><span class="p">),</span>
    <span class="p">)</span></code></pre></div>
<p>Then inside the <code>run_migrations_offline</code> method I swapped out:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">url</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">get_main_option</span><span class="p">(</span><span class="s2">&#34;sqlalchemy.url&#34;</span><span class="p">)</span></code></pre></div>
<p>for</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">url</span> <span class="o">=</span> <span class="n">get_url</span><span class="p">()</span></code></pre></div>
<p>and</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">connectable</span> <span class="o">=</span> <span class="n">engine_from_config</span><span class="p">(</span>
    <span class="n">config</span><span class="o">.</span><span class="n">get_section</span><span class="p">(</span><span class="n">config</span><span class="o">.</span><span class="n">config_ini_section</span><span class="p">),</span>
    <span class="n">prefix</span><span class="o">=</span><span class="s2">&#34;sqlalchemy.&#34;</span><span class="p">,</span>
    <span class="n">poolclass</span><span class="o">=</span><span class="n">pool</span><span class="o">.</span><span class="n">NullPool</span><span class="p">,</span>
<span class="p">)</span></code></pre></div>
<p>for</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">connectable</span> <span class="o">=</span> <span class="n">create_engine</span><span class="p">(</span><span class="n">get_url</span><span class="p">())</span></code></pre></div>
<p>Don&rsquo;t forget the import:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">create_engine</span></code></pre></div>
<p>Enjoy!</p>
]]></content>
		</item>
		
		<item>
			<title>Invalidate AWS CloudFront Cache</title>
			<link>https://taylorbrazelton.com/posts/2019/01/invalidate-aws-cloudfront-cache/</link>
			<pubDate>Mon, 28 Jan 2019 15:51:58 -0500</pubDate>
			
			<guid>https://taylorbrazelton.com/posts/2019/01/invalidate-aws-cloudfront-cache/</guid>
			<description>Today, I needed to invalidate a specific Distribution&amp;rsquo;s cache on AWS Cloudfront. This resulted in me searching through the AWS cli tool&amp;rsquo;s docs. Luckily I was able to uncover a command to accomplish such a task.
aws cloudfront create-invalidation --distribution-id DISTRIBUTION_ID --paths /\*  Simply replace DISTRIBUTION_ID with the proper ID and you will be good to go.</description>
			<content type="html"><![CDATA[<p>Today, I needed to invalidate a specific Distribution&rsquo;s cache on AWS Cloudfront.
This resulted in me searching through the AWS cli tool&rsquo;s docs.
Luckily I was able to uncover a command to accomplish such a task.</p>

<pre><code>aws cloudfront create-invalidation --distribution-id DISTRIBUTION_ID --paths /\*
</code></pre>

<p>Simply replace <strong>DISTRIBUTION_ID</strong> with the proper ID and you will be good to go.</p>
]]></content>
		</item>
		
		<item>
			<title>Unlimited Private Repos on Github</title>
			<link>https://taylorbrazelton.com/posts/2019/01/unlimited-private-repos-on-github/</link>
			<pubDate>Tue, 08 Jan 2019 16:52:04 -0500</pubDate>
			
			<guid>https://taylorbrazelton.com/posts/2019/01/unlimited-private-repos-on-github/</guid>
			<description>Github just upgraded their free plan to include unlimited private repos!
Check it out here!
Downgrade your account from Git Pro on the billing page.</description>
			<content type="html"><![CDATA[<p>Github just upgraded their free plan to include unlimited private repos!</p>

<p>Check it out <a href="https://blog.github.com/2019-01-07-new-year-new-github/?fbclid=IwAR3pTMrXdNkJszPqWxxdJP_CzCOlbRHrc6rnD23_xkpvDjNg9EIA8vcLbiI" target="_blank">here</a>!</p>

<p>Downgrade your account from <code>Git Pro</code> on the <a href="https://github.com/settings/billing" target="_blank">billing page</a>.</p>
]]></content>
		</item>
		
		<item>
			<title>Replace a Table With View</title>
			<link>https://taylorbrazelton.com/posts/2019/01/replace-table-with-view/</link>
			<pubDate>Mon, 07 Jan 2019 10:51:38 -0500</pubDate>
			
			<guid>https://taylorbrazelton.com/posts/2019/01/replace-table-with-view/</guid>
			<description>This weekend while on dev support, an issue came to our attention that customers were still able to see soft deleted data in some parts of the app. Instead of going through all the code and updating each query to return only existing data though, I went directly to the source and replaced the table with a view.
Pros/Cons: Pros: - Easily revertible change. - Apply once, fixes all current queries.</description>
			<content type="html"><![CDATA[

<p>This weekend while on dev support, an issue came to our attention that
customers were still able to see <code>soft deleted</code> data in some parts of the app.
Instead of going through all the code and updating each query to return only
existing data though, I went directly to the source and replaced the table with
a view.</p>

<h4 id="pros-cons">Pros/Cons:</h4>

<p>Pros:
 - Easily revertible change.
 - Apply once, fixes all current queries.
 - Views can still have INSERT, UPDATE, and DELETE statements run against them.
 - Good practice from a database design standpoint.</p>

<p>Cons:
 - Someone has to have access to the prod db to do it.
 - Can confuse other developers who are not familiar with views.
 - Depend on the indexes of the table below. You can not put an index on a view.</p>

<h4 id="this-is-how-i-did-it">This is how I did it:</h4>

<p>1) Rename the table.</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">chapters</span> <span class="k">TO</span> <span class="n">chapters_all</span><span class="p">;</span></code></pre></div>
<p>2) Create a simple view that filters out deleted data.</p>
<div class="highlight"><pre class="chroma"><code class="language-SQL" data-lang="SQL"><span class="k">CREATE</span> <span class="k">VIEW</span> <span class="o">`</span><span class="n">chapters</span><span class="o">`</span> <span class="k">AS</span>
    <span class="k">SELECT</span>
        <span class="o">`</span><span class="n">chapters_all</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="k">AS</span> <span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">,</span>
        <span class="o">`</span><span class="n">chapters_all</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">school</span><span class="o">`</span> <span class="k">AS</span> <span class="o">`</span><span class="n">school</span><span class="o">`</span><span class="p">,</span>
        <span class="o">`</span><span class="n">chapters_all</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">removed</span><span class="o">`</span> <span class="k">AS</span> <span class="o">`</span><span class="n">removed</span><span class="o">`</span><span class="p">,</span>
        <span class="n">etc</span><span class="p">...</span>
    <span class="k">FROM</span>
        <span class="o">`</span><span class="n">chapters_all</span><span class="o">`</span>
    <span class="k">WHERE</span>
        <span class="p">(</span><span class="o">`</span><span class="n">chapters_all</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">removed</span><span class="o">`</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span></code></pre></div>
<p>Hope this helps!</p>
]]></content>
		</item>
		
		<item>
			<title>Hello World</title>
			<link>https://taylorbrazelton.com/posts/2019/01/hello-world/</link>
			<pubDate>Sun, 06 Jan 2019 23:49:57 -0500</pubDate>
			
			<guid>https://taylorbrazelton.com/posts/2019/01/hello-world/</guid>
			<description>Hello World.
This year I am moving my blog from Pelican to Hugo.</description>
			<content type="html"><![CDATA[<p>Hello World.</p>

<p>This year I am moving my blog from Pelican to Hugo.</p>
]]></content>
		</item>
		
		<item>
			<title>Django Migrations Downgrade in Docker Swarm</title>
			<link>https://taylorbrazelton.com/posts/2018/docker-django-migration-downgrade/</link>
			<pubDate>Fri, 02 Mar 2018 23:49:57 -0500</pubDate>
			
			<guid>https://taylorbrazelton.com/posts/2018/docker-django-migration-downgrade/</guid>
			<description>Edge cases are a big problem in software engineering, one that I recently ran into while on a beta box was errors being thrown after a downgrade.
First a little background on the application. It is a django application running in a docker container via docker-swarm. Our application upgrade/downgrade process is to reduce the amount of containers running down to 0. Change the tag numbers in our .yml file and then scale them back up.</description>
			<content type="html"><![CDATA[<p>Edge cases are a big problem in software engineering, one that I recently ran
into while on a beta box was errors being thrown after a downgrade.</p>

<p>First a little background on the application. It is a django application running
in a docker container via docker-swarm. Our application upgrade/downgrade
process is to reduce the amount of containers running down to 0. Change the
tag numbers in our .yml file and then scale them back up. This forces the
containers to download the newly defined version. Note that our downgrade
process is exactly the same we just update the a tag with an older version.</p>

<p>The process described above might sound correct to you, however, because we use migrations
to structure our database the process is flawed. By replaceing the tag and
just moving to older docker containers, the downgrade function inside our
migrations never get ran. Instead the downgraded application has no idea
about the migrations that existed in the newer version that does not in it&rsquo;s
own. Thus resulting in an inconsistant database state with the version of
application deployed.</p>

<p>My current solution to this issue is to run the migration downgrade for each
app in our django project manually inside of the existing application container
. To do this I start out with a diff of the code between the old version and
the new version. I look for any added migrations and run the command below to
have django south run through the downgrade methods until it reaches the
latest migration in the old code. Then I perform the old migration method.</p>

<p>Here is a step by step list of the process.</p>

<p>1) Diff of code.</p>

<p>2) Write down oldest added migration number and app name</p>

<p>3) Exec into the application docker container.</p>

<p>4) Migrate backwards :</p>

<pre><code>./manage.py migrate appname 0000
</code></pre>

<p>5) Exit out of container.</p>

<p>6) Scale the swarm down to 0 nodes.</p>

<p>7) Change tag number.</p>

<p>8) Scale the containers back up.</p>

<p>Do you have any suggestions or any improvements to this process? Comment below
and link me to other articles you&rsquo;ve read about this process. The more we know
together the better our overall solutions can be.</p>
]]></content>
		</item>
		
		<item>
			<title>Strategy for Moving Away From Legacy Code</title>
			<link>https://taylorbrazelton.com/posts/2018/moving-away-from-legacy/</link>
			<pubDate>Thu, 15 Feb 2018 23:49:57 -0500</pubDate>
			
			<guid>https://taylorbrazelton.com/posts/2018/moving-away-from-legacy/</guid>
			<description>1) Chunk Your App Into Pieces  Turn everything into a MICROservice.  2) Modernize Access To Data  Implement Data Access via API&amp;rsquo;s or using a similar data store.
 Developers should not care what it looks like on the backend. They should be able to easly access and manipulate the data in a secure way using their favorite languages.
  3) Replace Decaying Code  Slowly replace chunks of your application one piece at a time.</description>
			<content type="html"><![CDATA[

<h5 id="1-chunk-your-app-into-pieces">1) Chunk Your App Into Pieces</h5>

<ul>
<li>Turn everything into a MICROservice.</li>
</ul>

<h5 id="2-modernize-access-to-data">2) Modernize Access To Data</h5>

<ul>
<li><p>Implement Data Access via API&rsquo;s or using a similar data store.</p></li>

<li><p>Developers should not care what it looks like on the backend. They should be
able to easly access and manipulate the data in a secure way using their
favorite languages.</p></li>
</ul>

<h5 id="3-replace-decaying-code">3) Replace Decaying Code</h5>

<ul>
<li>Slowly replace chunks of your application one piece at a time.</li>
</ul>

<h4 id="benifits">Benifits:</h4>

<ul>
<li><p>Consolidation of Virtual Machines.</p></li>

<li><p>Easier to move services around.</p></li>

<li><p>Scaling services is easy.</p></li>

<li><p>Chatops</p></li>

<li><p>Use Open Source Technology</p></li>

<li><p>Changes Culture as getting stuff done is very rewarding.</p></li>
</ul>
]]></content>
		</item>
		
	</channel>
</rss>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>TAYLOR BRAZELTON</title><link href="https://taylorbrazelton.com/" rel="alternate"></link><link href="https://taylorbrazelton.com/feeds/all.atom.xml" rel="self"></link><id>https://taylorbrazelton.com/</id><updated>2016-09-26T00:00:00-04:00</updated><entry><title>Writing Better Code</title><link href="https://taylorbrazelton.com/2016/Sep/15/writing-better-code/" rel="alternate"></link><published>2016-09-26T00:00:00-04:00</published><author><name>Taylor Brazelton</name></author><id>tag:taylorbrazelton.com,2016-09-15:2016/Sep/15/writing-better-code/</id><summary type="html">&lt;p&gt;As a software engineer/artist I could spend copious amounts of time refactoring. 
However, at some point products have to be shiped. You can't just keep
 pushing deadlines back further and further. Instead I utilize the tips below
 to provide functional code that is also clean.&lt;/p&gt;
&lt;h2&gt;The DRY Principle.&lt;/h2&gt;
&lt;p&gt;DRY stands for "don't repeat yourself" and you shouldn't. If you do, STOP! 
Repeating yourself will never be a good pratice. 
The programming gods invented functions for a reason. Start now by splitting up
your big &lt;code&gt;main()&lt;/code&gt; funciton.&lt;/p&gt;
&lt;h2&gt;Design Patterns&lt;/h2&gt;
&lt;p&gt;What you might not of know is that there are three major categories of
design patterns; creational, structural, and behavioral. Each category having a
plethra of tools to help solve everyday software problems. &lt;/p&gt;
&lt;h2&gt;Understand The Computer&lt;/h2&gt;
&lt;p&gt;Knowing that the windows registry exists and how to edit it is not "understanding"
the inner workings of a computer. Understanding a computer means having knowledge 
about things such as the datapath on the CPU and different levels of cache.&lt;/p&gt;
&lt;p&gt;If you don't understand how a CPU does computations such 
as multiplication down at a binary level, how are you suppose to think in terms
of preformance? When your application is eating up precious cycles for useless 
tasks, being able to optimize the program and utilizing your compilers internals
to elevate things to a kernel level commands can become of utmost importance.&lt;/p&gt;
&lt;h2&gt;Tools&lt;/h2&gt;
&lt;p&gt;This one is really just based on how much experience a person has with the utilities
of their trade. Currently I use VS Code + a Vim Shortcut plugins. I then utilize
flake8 to keep my code style up to par and pylint to ensure no bugs exist in my
code.&lt;/p&gt;
&lt;p&gt;I'm not saying switch to my tools, I'm saying start diving deep into how they work. 
Ask yourself, are there any menu's or options you haven't explored before? Mess
around with them until you figure out. Can you use a tool in a way it wasn't meant to?
Try it. Don't settle, expand it and put it into your pipeline.&lt;/p&gt;
&lt;h2&gt;Readability&lt;/h2&gt;
&lt;p&gt;This one is very important. Instead of writing a list comprehension that goes way past 
the end of the 79 character PEP8 line length, use multiple lines. Name variables
approprately and keep packages clean. All things that you should be actively striving for
when writing code or refactoring.&lt;/p&gt;
&lt;h2&gt;Code Reviews&lt;/h2&gt;
&lt;p&gt;Open source or not you should strive to get someone to review your code. This helps
promote a more open enviroment and prevents bugs from making it into production code.&lt;/p&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;I could talk for hours on this one. Testing is essential. 
Start out with unittests and verify small components of the system. Once
you get a hold of how to do that, start adding integration tests for business 
essential parts of your application.&lt;/p&gt;
&lt;p&gt;Have a ton of services? Test the main functionality of these programs by running
smoke tests. Smoke tests are very light weight scripts that verify the conditions
of your system. A good example of smoke tests is ensuring your FTP server is 
online and that the user can login.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Wrapping things up, you should always strive for clean and readable code. I hope
that some of the items I've listed above can enable you and your team to create
 amazing and beautiful products for people all over the world.&lt;/p&gt;
&lt;p&gt;Please feel free to share this post and comment anything I left out or might be
able to improve on for my own sake.&lt;/p&gt;</summary><category term="writing"></category><category term="better"></category><category term="code"></category><category term="refactoring"></category><category term="python"></category><category term="tips"></category></entry><entry><title>Top 2016 Python Tools And Packages</title><link href="https://taylorbrazelton.com/2016/Sep/12/top-2016-python-tools-and-packages/" rel="alternate"></link><published>2016-09-12T00:00:00-04:00</published><author><name>Taylor Brazelton</name></author><id>tag:taylorbrazelton.com,2016-09-12:2016/Sep/12/top-2016-python-tools-and-packages/</id><summary type="html">&lt;p&gt;Enjoy this list of my most used python tools and packages.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jflesch/pyocr"&gt;pyorc&lt;/a&gt; - An amazing package that wraps around Tesseract so that you can do optical character recognition on imag&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/tox-dev/tox"&gt;tox&lt;/a&gt; - A wonderful package that you can use to automate and standardize python testing.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/giampaolo/psutil"&gt;psutil&lt;/a&gt; - Cross platform library that exposes process and system information.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/gaubert/gmvault"&gt;gmvault&lt;/a&gt; - Not a library, but still written in python. It gives me the ability to backup and restore my emails from gmail, locally.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/elastic/elasticsearch-dsl-py"&gt;elasticsearch-dsl-py&lt;/a&gt; - Favorite high level library for elasticsearch manipulation. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/2/library/2to3.html"&gt;2to3&lt;/a&gt; - Great tool for helping move from a python 2 codebase to a python 3 codebase.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jkbrzt/httpie"&gt;httpie&lt;/a&gt; - A good tool for sending HTTP requests without the complexity that is CURL.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/google/yapf"&gt;yapf&lt;/a&gt; - Code formatting tool made by google. Very useful in a team enviroment to ensure all code looks as if it was written by a single developer.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/litl/rauth"&gt;rauth&lt;/a&gt; - Helpful library for people utilizing the OAuth workflow ontop of requests.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jonathanslenders/ptpython"&gt;ptpython&lt;/a&gt; - Best python REPL.&lt;/p&gt;</summary><category term="python"></category><category term="packages"></category><category term="favorite"></category><category term="top"></category><category term="2016"></category><category term="end"></category><category term="of"></category><category term="the"></category><category term="year"></category></entry><entry><title>Raspberry Pi Arcade Eumlator Price Out</title><link href="https://taylorbrazelton.com/2016/Jul/28/raspberry-pi-arcade-eumlator-price-out/" rel="alternate"></link><published>2016-08-10T21:00:00-04:00</published><author><name>Taylor Brazelton</name></author><id>tag:taylorbrazelton.com,2016-07-28:2016/Jul/28/raspberry-pi-arcade-eumlator-price-out/</id><summary type="html">&lt;h2&gt;Update #1:&lt;/h2&gt;
&lt;p&gt;Today is the day I finally ordered my raspberry pi 3 model b, powersupply, and a 32GB SD card. I had an ich to get a bigger card, but then I came across &lt;a href="https://www.raspberrypi.org/help/faqs/#sdMax"&gt;this&lt;/a&gt; which led me to believe a 32GB card might be it's max and I don't want to pay more money only to find out it doesn't work. &lt;/p&gt;
&lt;h3&gt;List Of Items Purchased:&lt;/h3&gt;
&lt;p&gt;$36.00 - &lt;a href="https://www.amazon.com/Raspberry-Pi-RASP-PI-3-Model-Motherboard/dp/B01CD5VC92/ref=sr_1_3?ie=UTF8&amp;amp;qid=1469844583&amp;amp;sr=8-3&amp;amp;keywords=raspberry+pi+3+Model+B"&gt;Raspberry Pi 3 Model B&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;$15.10 - &lt;a href="https://www.amazon.com/SanDisk-Extreme-microSDHC-Adapter-SDSQXNE-032G-GN6MA/dp/B013CP5HCK?ie=UTF8&amp;amp;tag=codihorr-20"&gt;SanDisk Extreme 32GB microSDHC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;$9.99 - &lt;a href="https://www.amazon.com/CanaKit-Raspberry-Supply-Adapter-Charger/dp/B00MARDJZ4"&gt;CanaKit 5V 2.5A Raspberry Pi 3 Power Supply&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;These three items tallied up to an exact: $61.09(including sales tax)&lt;/p&gt;
&lt;p&gt;I'll have to get a case at another point and time. The one's on amazon wern't very appealing.&lt;/p&gt;
&lt;h2&gt;Original Article:&lt;/h2&gt;
&lt;p&gt;Last week, while I was on vacation, I got inspired by my Uncle to build an arcade emulator. Then, coming back to work I found a hacker news post about an &lt;a href="https://blog.codinghorror.com/the-raspberry-pi-has-revolutionized-emulation/"&gt;article from coding horror&lt;/a&gt; detailing some of the specifics about raspberry pi based emulators. I figure the first step to see if I want to take on this project is to price out all of the hardware. Then depending on how much disposable income I can afford, I'll hopefully act upon this impulse thought.&lt;/p&gt;
&lt;p&gt;Enjoy! :)&lt;/p&gt;
&lt;h4&gt;Raspberry Pi Kits:&lt;/h4&gt;
&lt;p&gt;$49.99 - &lt;a href="https://www.amazon.com/Vilros-Raspberry-Basic-Starter-Kit-Clear/dp/B01D92SSX6?ie=UTF8&amp;amp;tag=codihorr-20"&gt;Raspberry Pi 3 Starter Kit&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Raspberry Pi:&lt;/h4&gt;
&lt;p&gt;$35.00 - &lt;a href="http://www.mcmelectronics.com/product/83-17300?utm_campaign=e14&amp;amp;utm_source=e14community&amp;amp;utm_medium=forum&amp;amp;utm_term=83-17300&amp;amp;COM=superwidget-link_RaspberryPi+CMPNULL"&gt;Raspberry Pi 3 Model B&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;$36.00 - &lt;a href="https://www.amazon.com/Raspberry-Pi-RASP-PI-3-Model-Motherboard/dp/B01CD5VC92/ref=sr_1_3?ie=UTF8&amp;amp;qid=1469844583&amp;amp;sr=8-3&amp;amp;keywords=raspberry+pi+3+Model+B"&gt;Raspberry Pi 3 Model B&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Power Supplies&lt;/h4&gt;
&lt;p&gt;$9.99 - &lt;a href="https://www.amazon.com/CanaKit-Raspberry-Supply-Adapter-Charger/dp/B00MARDJZ4"&gt;CanaKit 5V 2.5A Raspberry Pi 3 Power Supply&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Micro SD Cards:&lt;/h4&gt;
&lt;p&gt;$15.10 - &lt;a href="https://www.amazon.com/SanDisk-Extreme-microSDHC-Adapter-SDSQXNE-032G-GN6MA/dp/B013CP5HCK?ie=UTF8&amp;amp;tag=codihorr-20"&gt;SanDisk Extreme 32GB microSDHC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;$12.99 - &lt;a href="https://www.amazon.com/SanDisk-Extreme-microSDHC-Adapter-SDSQXNE-032G-GN6MA/dp/B013CP5HCK?ie=UTF8&amp;amp;tag=codihorr-20"&gt;Samsung 32GB EVO Plus Class 10 Micro SDHC&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Controllers:&lt;/h4&gt;
&lt;p&gt;$7.99 - &lt;a href="https://www.amazon.com/Retro-Nintendo-Controller-Windows-Purple/dp/B016JV9W6Q?ie=UTF8&amp;amp;psc=1&amp;amp;redirect=true&amp;amp;ref_=od_aui_detailpages00"&gt;SNES USB Controller&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've some xbox one controllers I can probably use.&lt;/p&gt;</summary><category term="raspberry"></category><category term="pi"></category><category term="arcade"></category><category term="emulator"></category><category term="price"></category><category term="out"></category></entry><entry><title>Easiest Way To Install Docker On Linux</title><link href="https://taylorbrazelton.com/2016/Jul/22/easiest-way-to-install-docker-on-linux/" rel="alternate"></link><published>2016-07-22T12:00:00-04:00</published><author><name>Taylor Brazelton</name></author><id>tag:taylorbrazelton.com,2016-07-22:2016/Jul/22/easiest-way-to-install-docker-on-linux/</id><summary type="html">&lt;p&gt;Just run the command below to download and run a script from the docker website. It will figureout which install is approprate for your platform and everything! Isn't it sweet?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget -gO- https://get.docker.com/ | sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Enjoy :)&lt;/p&gt;</summary><category term="docker"></category><category term="install"></category><category term="linux"></category><category term="easiest"></category></entry><entry><title>Getting Started with Pelican</title><link href="https://taylorbrazelton.com/2016/Jun/27/getting-started-with-pelican/" rel="alternate"></link><published>2016-07-01T20:00:00-04:00</published><author><name>Taylor Brazelton</name></author><id>tag:taylorbrazelton.com,2016-06-27:2016/Jun/27/getting-started-with-pelican/</id><summary type="html">&lt;p&gt;I am new to pelican, so in reality this is just the steps I used to setup my pelican blog. Feel free to experiment and do things differently.&lt;/p&gt;
&lt;h3&gt;Create your virtual enviroment.&lt;/h3&gt;
&lt;p&gt;Anytime you are using python, you should always utilize a virtual enviroment. In this tutorial we will use virtualenv. This will prevent us from junking up our global install of python. &lt;/p&gt;
&lt;p&gt;For first timers I suggest visiting the hitchhiker's guide to python, as they have a very &lt;a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/"&gt;comprehensive tutorial&lt;/a&gt; on getting started with virtual enviroments.&lt;/p&gt;
&lt;h3&gt;Install Pelican&lt;/h3&gt;
&lt;p&gt;Verify that your virtual enviroment is active so that we can start to install packages. Here we will install pelican and it's helper package Markdown.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pelican Markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Pelican Quick Start&lt;/h3&gt;
&lt;p&gt;Now it's time to setup the site. Run the quick-start command and enter in details such as the site name and description.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Make sure you decided on a catchy name!&lt;/p&gt;
&lt;h3&gt;Pick a Theme&lt;/h3&gt;
&lt;p&gt;Pelican comes with a default theme, which I personally dislike. It just doesn't capture my personality very well. Luckily there is a site called &lt;a href="https://github.com/getpelican/pelican-themes"&gt;pelican themes&lt;/a&gt; that will give us a good selection of 3rd party themes we can use on our site.&lt;/p&gt;
&lt;p&gt;I personally really like the flex theme. Clone the theme of your choice and prep for your first blog post. Make sure you setup your &lt;code&gt;pelicanconf.py&lt;/code&gt; file as deamed via the README in the themes repo.&lt;/p&gt;
&lt;h3&gt;Create your first post&lt;/h3&gt;
&lt;p&gt;Write your first post in markdown and place it inside the &lt;code&gt;content&lt;/code&gt; folder. &lt;/p&gt;
&lt;h3&gt;Compile your blog.&lt;/h3&gt;
&lt;p&gt;Time to have pelican generate your static HTML blog for you! Just run the command below. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simply upload your &lt;code&gt;output&lt;/code&gt; folder and enjoy!&lt;/p&gt;</summary><category term="using"></category><category term="pelican"></category><category term="python"></category><category term="virtualenv"></category><category term="getting"></category><category term="started"></category></entry><entry><title>Github Blogging</title><link href="https://taylorbrazelton.com/2016/Jun/23/github-blogging/" rel="alternate"></link><published>2016-06-23T21:06:00-04:00</published><author><name>Taylor Brazelton</name></author><id>tag:taylorbrazelton.com,2016-06-23:2016/Jun/23/github-blogging/</id><summary type="html">&lt;p&gt;Hello internet!&lt;/p&gt;
&lt;p&gt;I'm just going to get stright to the point, I use to have a personal/tech blog @ &lt;a href="http://tech-fyi.net"&gt;tech-fyi.net&lt;/a&gt; but like bread, it got stale. I started it over 7 years ago when I was in high school. Since then, I have graduated with a bachelor's degree in Computer Science from Purdue and have moved on to more interesting things in life. &lt;/p&gt;
&lt;p&gt;More soon. Don't forget to interact with me on &lt;a href="http://twitter.com/Ryanb58"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;</summary><category term="blog"></category><category term="github"></category><category term="blogging"></category><category term="tech-fyi"></category><category term="new"></category><category term="first"></category><category term="post"></category></entry></feed>